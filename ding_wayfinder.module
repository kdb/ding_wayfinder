<?php

include_once('ding_wayfinder.features.inc');

/**
 * Implements hook_menu().
 */
function ding_wayfinder_menu() {
  $items = array();
  $items['biblioteker/%/wayfinder'] = array(
    'title' => 'Digital Wayfinder frontend', 
    'page callback' => 'ding_wayfinder_frontend', 
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );
/*  $items['biblioteker/%/wayfinder/cache'] = array(
    'title' => 'Digital Wayfinder frontend', 
    'page callback' => 'ding_wayfinder_cache', 
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );*/
  $items['biblioteker/%/wayfinder/post_settings'] = array(
    'title' => 'Digital Wayfinder frontend', 
    'page callback' => 'ding_wayfinder_ajax_save_clients', 
    'access arguments' => array('access content'), 
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/wayfinder/%node'] = array(
    'title' => 'Wayfinder Library',
    'description' => 'Setup and administer Digital Wayfinder for all libraries',
    'page callback' => 'ding_wayfinder_clients', 
    'access arguments' => array('access administration pages'), 
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/wayfinder/%/clients'] = array(
    'title' => 'Digital Wayfinder Clients', 
//    'page callback' => 'ding_wayfinder_clients', 
    'access arguments' => array('access administration pages'), 
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/wayfinder/%/clients/%/remove'] = array(
    'title' => 'Digital Wayfinder Clients', 
    'page callback' => 'ding_wayfinder_clients_remove',
    'page arguments' => array(3,5),
    'access arguments' => array('access administration pages'), 
    'type' => MENU_CALLBACK,
  );


  $items['admin/settings/wayfinder/%/settings'] = array(
    'description'      => 'settings for wayfinder',
    'access arguments' => array('access administration pages'),
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ding_wayfinder_settings_form',1),
    'title' => 'Digital Wayfinder Settings', 
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function ding_wayfinder_settings_form($form_state) {

  $library = arg(3);

  $form = array();

  $form['wf'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Wayfinder settings'),
    '#description' => t('These variables must be set inorder for the library wayfinder to work'),
    '#tree'        => FALSE,
  );
  $form['wf']['ding_wayfinder_server'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Websocket URL'),
    '#description'   => t('Where is the websocket and app located? eg. ws://localhost:8080/app'),
    '#required'      => TRUE,
    '#default_value' => variable_get('ding_wayfinder_server', ''),
  );
  $form['wf']['ding_wayfinder_idletime_'.$library] = array(
    '#type'          => 'textfield',
    '#title'         => t('Client Idle time (seconds)'),
    '#description'   => t('How long can the client remain without getting touched?'),
    '#required'      => TRUE,
    '#default_value' => variable_get('ding_wayfinder_idletime_'.$library, '30'),
  );
  
  return system_settings_form($form);
}


/**
 * Set library via POST
 */
function ding_wayfinder_ajax_save_clients() {
 // variable_set('ding_wayfinder_clients_'.arg(1),"");
  if($_POST['deviceid'] == ''){
    return;
  }

  $name = filter_xss($_POST['clientname']);
  $deviceid = filter_xss($_POST['deviceid']);
  $clients = unserialize(variable_get('ding_wayfinder_clients_'.arg(1),array()));
  // add client if it dosen't exist and set last update time;
//  var_dump($deviceid);

  $clients[$deviceid] = array('name' => $name, 'time' => format_date(time()));
  
  //var_dump($clients);

  variable_set('ding_wayfinder_clients_'.arg(1),serialize($clients));
  print t('"!name" is now registered with server',array('!name' => $name));
}


function ding_wayfinder_settings() {
  return 'settings';
}
/**
 * Pagecallback to list all connected clients
 */ 

function ding_wayfinder_clients() {
  $clients = unserialize(variable_get('ding_wayfinder_clients_'.arg(3),array()));

//var_dump($clients);

  $i=0;
  foreach ($clients as $key => $client) {
    $rows[] = array(array('data' => $client['name'],'class' => $key),'Wait...','---',$client['time'],l(t('X'),'admin/settings/wayfinder/'.arg(3).'/clients/'.$key.'/remove',array('query' => array('destination' => 'admin/settings/wayfinder/'.arg(3).'/clients'))));
    $clientsJS[] = $key;

    $i++;
  }

  $settings = array(
    'wayfinder_path' => drupal_get_path('module','ding_wayfinder'),
    'server' => variable_get('ding_wayfinder_server',''),
  );
  $data = array('ding_wayfinder' => array('settings' => $settings,'clients' => $clientsJS));
  drupal_add_js($data,'setting');

  $libpath = drupal_get_path('module', 'ding_wayfinder').'/lib/php-websocket/client/js/';

  drupal_add_js($libpath . 'json2.js');
  drupal_add_js($libpath . 'swfobject.js');
  drupal_add_js($libpath . 'FABridge.js');
  drupal_add_js($libpath . 'web_socket.js');
  drupal_add_js($libpath . 'webpush.js');
  drupal_add_js('WEB_SOCKET_SWF_LOCATION = "/'.$libpath.'WebSocketMain.swf";','inline');
  drupal_add_js(drupal_get_path('module', 'ding_wayfinder').'/js/admin.js');

  // build client list
  $output = '<p class="connection_status">'.t('Status: <span> Trying to connect...</span>').'</p>';
  $output .= theme('table',array(t('Clients'),t('Status'),t('Reloaded last'),t('Last answer'),t('Remove')),$rows);
  $output .= theme('button',array('#id' => 'reload', '#value' => t('Update clients'), '#type' => 'submit', '#button_type' => 'submit'));
  $output .= theme('button',array('#id' => 'reload_list', '#value' => t('Reload client list'), '#type' => 'submit', '#button_type' => 'submit'));

  return $output;
}

function ding_wayfinder_clients_remove($library,$client) {
  $clients = unserialize(variable_get('ding_wayfinder_clients_'.$library,array()));
  unset($clients[$client]);
  variable_set('ding_wayfinder_clients_'.$library,serialize($clients));
  drupal_goto();
}

function ding_wayfinder_theme() {
 return array(
    // as in 'theme('verbose_method',...)
    'ding_wayfinder_frontend_build' => array(
      'template' => 'ding-wayfinder-frontend',
      'arguments' => array(
        'styles' => null, 
        'scripts' => null,
      ),
    ),
  );
}

function ding_wayfinder_cache() {
  header('Contesnt-Type: text/cache-manifest;');
echo "CACHE MANIFEST
	 index.html
	/sites/all/modules/ding_wayfinder/css/layout.css
css/ios.css

#".time()."
";

}

function ding_wayfinder_frontend() {

$modulekey = 'ding_wayfinder';

$files = file_scan_directory(drupal_get_path('module', $modulekey).'/css/client', '.css');
foreach ($files as $file) {
  drupal_add_css($file->filename);
}
$css = drupal_add_css();

foreach ($css['all']['module'] as $key => $line) {
  if (!strpos($key, $modulekey)) {
   unset($css['all']['module'][$key]);
  }
}

$data = ding_wayfinder_get_keywords(arg(1));

// join floors up on keywords
// for each keyword add to data array. (Sorted floor weight, then keyword weight.) if floor is diffrent from previous floor, make new floor in data array.

$settings = array(
	'wayfinder_path' => drupal_get_path('module','ding_wayfinder'),
	'launched' => format_date(time()),
        'device_identifier' => md5(time()),
	'server' => variable_get('ding_wayfinder_server', ''),
);

$data = array('ding_wayfinder' => array('data' => $data,'settings' => $settings));

drupal_add_js($data,'setting');

$files = file_scan_directory(drupal_get_path('module', $modulekey).'/js/client', '.js');
foreach ($files as $file) {
  drupal_add_js($file->filename);
}
$js = drupal_add_js();

foreach ($js['module'] as $key => $line) {
  if (!strpos($key, $modulekey)) {
   unset( $js['module'][$key]);
  }
}

$styles = drupal_get_css($css);
$scripts = drupal_get_js('header', $js);

  echo theme('ding_wayfinder_frontend_build',$styles,$scripts);
}

function ding_wayfinder_get_keywords($lib) {

  $data = array();

  // loop all floors
  $result = db_query('SELECT n.nid FROM {node} AS n LEFT JOIN content_type_wf_floor AS floor ON n.nid = floor.nid WHERE floor.field_library_nid = '.$lib. ' ORDER BY n.sticky DESC');
  while ($obj = db_fetch_object($result)) {
    $node = node_load($obj->nid);
    // loop all keywords for given floor
    $keyword_result = db_query('SELECT n.nid FROM {node} AS n LEFT JOIN content_type_wf_keyword AS kw ON n.nid = kw.nid WHERE kw.field_floor_nid = '. $obj->nid . ' ORDER BY n.sticky DESC');
    while ($obj = db_fetch_object($keyword_result)) {
      $keyword_node = node_load($obj->nid);
      $keyword['name'] = $keyword_node->title;
      $keyword['filename'] = $keyword_node->field_keywordoverlay[0]['filepath'];
      if ($keyword_node->taxonomy) {
        // get all noded in taxonomy and choose the first one. if first one equals this one, just set keywordid like normal, else set keywordid same as first
        $result_taxonomy = taxonomy_select_nodes( array_keys($keyword_node->taxonomy));
        // get first node
        $obj = db_fetch_object($result_taxonomy);
 	if ($obj->nid != $keyword_node->nid) {
	  $keyword['id'] = $obj->nid;
 	}
        else { 
          $keyword['id'] = $keyword_node->nid;
        }
      }
      else {
        $keyword['id'] = $keyword_node->nid;
      }
      $keywords[] = $keyword;
    }

    $floor['name'] = $node->title;
    $floor['filename'] = $node->field_floorplan[0]['filepath'];
    $floor['keywords'] = $keywords;
    unset($keywords);

    $data[] = $floor;
  }
  return $data;
}


/**
 * Implements hook_views_pre_render().
 */
function ding_wayfinder_views_pre_render(&$view) {

  if ($view->name != 'wayfinder') {
    return;
  }

  if ($view->args[0]) {
    $node = node_load($view->args[0]);
    $library = $node->title;
  }
  if ($view->args[1]) {
    $node = node_load($view->args[1]);
    $floor = $node->title;
  }
  switch ($view->current_display) {
    case 'page_1':
      $links[] = l(t('Back to Floors'),'admin/settings/wayfinder/' . $view->args[0] . '/floors');
      $links[] = l(t('Add another keyword'),'node/add/wf-keyword/' . $view->args[1],array('query' => array('destination' => 'admin/settings/wayfinder/' . $view->args[0] . '/' . $view->args[1]. '/keywords')));
      $links[] = l(t('Manage keyword collections'),'admin/content/taxonomy/'.$vid,array('query' => array('destination' => 'admin/settings/wayfinder/' . $view->args[0] . '/' . $view->args[1]. '/keywords')));
      $title = $library . ' : ' . $floor . ' : ' . t('Keywords');
      break;

    case 'page_2':
      $links[] = l(t('Back to Client list'),'admin/settings/wayfinder/'.$view->args[0]);
      $links[] = l(t('Add another floor'),'node/add/wf-floor/' . $view->args[0],array('query' => array('destination' => 'admin/settings/wayfinder/' . $view->args[0]. '/floors')));
      $title = $library . ' : ' . $floor . ' : ' . t('Keywords');
      $title = $library . ' : ' . t('Floors');
      break;

  }
//  $view->display_handler->options['footer'] = theme('item_list', $links);
  drupal_set_title($title);
}

/**
 * Implements hook_form_alter().
 */
function ding_wayfinder_form_alter(&$form,$form_state,$form_id) {

//dsm($form);



  if($form_id == 'weight_view_weight_form_wayfinder_page_1_drag') {

    $form['#submit'][] = 'ding_wayfinder_weight_view_weight_form_wayfinder_page_1_drag_submit';
    $form['back_link'] = array(
      '#type' => 'submit',
      '#value' => t('Back to Floors'),
    );
    $form['new_link'] = array(
      '#type' => 'submit',
      '#value' => t('Add another keyword'),
    );
    $form['manage_link'] = array(
      '#type' => 'submit',
      '#value' => t('Manage keyword collections'),
    );
  }
  if($form_id == 'weight_view_weight_form_wayfinder_page_2_drag') {
    $form['#submit'][] = 'ding_wayfinder_weight_view_weight_form_wayfinder_page_2_drag_submit';
    $form['back_link'] = array(
      '#type' => 'submit',
      '#value' => t('Back to Client list'),
    );
    $form['new_link'] = array(
      '#type' => 'submit',
      '#value' => t('Add another floor'),
    );
  }

  if($form_id == 'wf_floor_node_form' && arg(3)) {
    $form['field_library']['#default_value'][0]['nid'] = arg(3);
  }
  if($form_id == 'wf_keyword_node_form' && arg(3)) {
    $form['field_floor']['#default_value'][0]['nid'] = arg(3);
  }
}

function ding_wayfinder_weight_view_weight_form_wayfinder_page_1_drag_submit($form,$form_state) {
  switch($form_state['clicked_button']['#id']){
    case 'edit-new-link':
      drupal_goto(url('node/add/wf-keyword/' . arg(4)),array('destination' => 'admin/settings/wayfinder/' . arg(3) . '/' . arg(4). '/keywords'));
      exit();
      break; 
    case 'edit-back-link':
      drupal_goto(url('admin/settings/wayfinder/' .  arg(3). '/floors'));
      exit();
break;
      
    case 'edit-manage-link':

      $vocabs = taxonomy_get_vocabularies();
      foreach ($vocabs as $vocab_object) {
        if ($vocab_object->module == 'ding_wayfinder') {
          $vid =  $vocab_object->vid;
        }
      }
     

      drupal_goto(url('admin/content/taxonomy/'.$vid));
      exit();
break;

  }
}
function ding_wayfinder_weight_view_weight_form_wayfinder_page_2_drag_submit($form,$form_state) {

  switch($form_state['clicked_button']['#id']){
    case 'edit-new-link':
      drupal_goto(url('/node/add/wf-floor/'.arg(3)),array('destination' => 'admin/settings/wayfinder/' . arg(3). '/floors'));
      exit();
      break; 
    case 'edit-back-link':
      drupal_goto(url('/admin/settings/wayfinder/' .  arg(3)));
      exit();
break;

}

}
